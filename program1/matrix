# Matrix Calculator by Joelle Perez

#!/bin/bash -e

#This function prints the dimensions of a matrix
dims() {
	if [ $# -gt "1" ]; #if number of files is greater than one
	then
		echo "error, too many arguments" 1>&2 #1>&2 means stderr
		return 1 #anything greater than 0 means false

	elif [ $# -eq 1 ] && [ ! -r $1 ] #if number of files is equal to one AND not readable
	then
		echo "error, file unreadable" 1>&2
		return 1

	else
		#saves count of lines in rows, $1 because it's the function's FIRST argument
		rows=$(wc -l < $1)

		#prints columns, excepts for 1x1 matrices needs fixing
		firstL=$(head -n 1 $1) #stores in the first line
		cols=$(echo $firstL | wc -w) #since it parses in strings it counts the "integers" in the matrices.txt files as words; counts "words"

		#prints rows and columns
		echo $rows $cols

		return 0 #means true
	fi
}

transpose() {
	if [ $# -gt "1" ]; 
	then
		echo "error, too many arguments" 1>&2 
		return 1 

	elif [ $# -eq 1 ] && [ ! -r $1 ]
	then
		echo "error, file unreadable" 1>&2
		return 1

	else
		#firstL=$(head -n 1 $1)
		# echo $firstL

		# rows=$(echo $firstL | tr '  ' '\n')
		# echo $rows

		#for loop, replace cut -f '#' with i
		cols_nums=$(cut -f 1 $1) #has the newline included, replace 1 with i; i represents which column
		echo $cols_nums | cat -A #cat -A shows the newline at the end

		rows=$cols_nums

		cols_nums=$(cut -f 2 $1)

		return 0
	fi
}

#main
datafilepath="datafile$$" #gets user inputted matrix

#functions with single parameters
if [ "$1" = "dims" ] || [ "$1" = "transpose" ] || [ "$1" = "mean" ];
then
	if [ $# = "2" ] #if there's two arguments
	then 
		$1 $2 #function, filename.txt

	elif [ $# = "1" ] #if function was the only argument provided
	then    
		cat > "$datafilepath" #asks the user for a matrix if one was not given the first time
		$1 "$datafilepath" #function, matrix; use ctr+d to finish matrix

	else #if number of arguments is greater than two
		echo "error, too many arguments" 1>&2
		exit 1
	fi #end for nested if statements

#functions with two parameters
elif [ "$1" =  "add" ] || [ "$1" = "multiply" ];
then
	if [ $# = "3" ] #if there's three arguments
	then
		$1 $2 $3 #function, file1.txt, file2.txt

	# elif, if function was only provided

	else #if number of arguments is greater than three
		echo "error, too many arguments" 1>&2
		exit 1
	fi

else
	echo "Error, function not found" 1>&2
	exit 1
fi #end for outer if statements