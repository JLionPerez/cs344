# Matrix Calculator by Joelle Perez

#!/bin/bash -e

#This function prints the dimensions of a matrix
dims() {
	if [ $# -gt 1 ]; #if number of files is greater than one
	then
		echo "error, too many arguments" 1>&2 #1>&2 means stderr
		return 1 #anything greater than 0 means false

	elif [ $# -eq 1 ] && [ ! -r $1 ] #if number of files is equal to one AND not readable
	then
		echo "error, file unreadable" 1>&2
		return 1

	else
		#saves count of lines in rows, $1 because it's the function's FIRST argument
		rows=$(wc -l < $1)

		#prints columns, excepts for 1x1 matrices needs fixing
		firstL=$(head -n 1 $1) #stores in the first line
		cols=$(echo $firstL | wc -w) #since it parses in strings it counts the "integers" in the matrices.txt files as words; counts "words"

		#prints rows and columns
		echo $rows $cols
		return 0 #means true

	fi
}

transpose() {
	if [ $# -gt 1 ]; 
	then
		echo "error, too many arguments" 1>&2 
		return 1 

	elif [ $# -eq 1 ] && [ ! -r $1 ]
	then
		echo "error, file unreadable" 1>&2
		return 1

	else
		firstL=$(head -n 1 $1)
		cols=$(echo $firstL | wc -w)

		#for each columns in row
		for ((i=1; i<=$cols; i++))
		do
			cols_nums=$(cut -f $i $1) #has the newline included, still has spaces
			echo $cols_nums | tr " " "\t" #replaces spaces with tabs
		done

		return 0

	fi
}

mean() {
	if [ $# -gt 1 ]; 
	then
		echo "error, too many arguments" 1>&2 
		return 1 

	elif [ $# -eq 1 ] && [ ! -r $1 ] 
	then
		echo "error, file unreadable" 1>&2
		return 1
	
	else
		firstL=$(head -n 1 $1)
		cols=$(echo $firstL | wc -w)
		rows=$(wc -l < $1)

		#iterate through each column
		for ((i=1; i<=cols; i++))
		do
			mean=0
			sum=0
			cols_nums=$(cut -f $i $1)

			#iterate through each row of each column
			for j in $cols_nums;
			do
				sum=`expr $sum + $j` #add numbers

			done

			#divide sum by rows
			mean=$((($sum + ($rows/2)*( ($sum>0)*2-1 )) / $rows))

			#printing means
			if [ $i = $cols ] #adds a newline at the end
			then 
				printf "%s\n" $mean

			else #adds tabs
				printf "%s\t" $mean

			fi
		done

		return 0
	fi
}

add() {
	#first matrix rows and cols
	firstL1=$(head -n 1 $1)
	cols1=$(echo $firstL1 | wc -w)
	rows1=$(wc -l < $1)

	#second matrix rows and cols
	firstL2=$(head -n 1 $2)
	cols2=$(echo $firstL2 | wc -w)
	rows2=$(wc -l < $2)

	if [ $# -gt 2 ];
	then
		echo "error, too many arguments" 1>&2
		return 1

	elif  { [ ! -r $1 ] || [ ! -r $2 ]; } && [ $# -eq 2 ]
	then
		echo "error, file unreadable" 1>&2
		return 1

	elif [ $cols1 != $cols2 ] || [ $rows1 != $rows2 ]
	then 
		echo "error, dimensions are not the same" 1>&2
		return 1

	else
		firstL1=$(head -n 1 $1)
		cols=$(echo $firstL1 | wc -w)
		rows=$(wc -l < $1)	#number of rows in file 1

		#cols_nums1=0
		#cols_nums2=0

		i=0 #while loop iterator
		#augend=0 #cols_nums1 iterator
		#append=0 #cols_nums2 iterator
		sum=0

		while read -u 3 left_matrix && read -u 4 right_matrix
		do
		((i++))

		# for ((i=1; i<=$cols; i++))
		# do

		# cols_nums1=$(cut -f $i <<< "$left_matrix")
		# cols_nums2=$(cut -f $i <<< "$right_matrix")

		#echo "colsnum1: $cols_nums1"
		#echo "colsnum2: $cols_nums2"
		#echo $cols $rows
		#echo "rows: $rows"

		newrow=$(($cols))
		#echo "DEBUG: newrow = $newrow"
			for ((j=1; j<=$newrow; j++))
			do
				# augend=$(echo "$cols_nums1" | cut -d $'\n' -f $j)
				# append=$(echo "$cols_nums2" | cut -d $'\n' -f $j)

				cols_nums1=$(cut -f $j <<< "$left_matrix")
				cols_nums2=$(cut -f $j <<< "$right_matrix")

				# echo "index $j"
				# echo "First file: $augend"
				# echo "Second file: $append"
				
				sum=$(($cols_nums1+$cols_nums2))
				#echo "$augend + $append = $sum"

				#printf "%d\t" $sum
				#echo $sum

				#printing sum
				if [ $j = $cols ] #adds a newline at the end
				then 
					printf "%s\n" $sum

				else #adds tabs
					printf "%s\t" $sum

				fi
				
			done
			#printf '\n'

		done 3<"$1" 4<"$2"

		return 0
	fi
}

multiply() {
	echo multiply
}

#main
datafilepath="datafile$$" #gets user inputted matrix

#functions with single parameters
if [ "$1" = "dims" ] || [ "$1" = "transpose" ] || [ "$1" = "mean" ];
then
	if [ $# = "2" ] #if there's two arguments
	then 
		$1 $2 #function, filename.txt

	elif [ $# = "1" ] #if function was the only argument provided
	then    
		cat > "$datafilepath" #asks the user for a matrix if one was not given the first time
		$1 "$datafilepath" #function, matrix; use ctr+d to finish matrix

	else #if number of arguments is greater than two
		echo "error, too many arguments" 1>&2
		exit 1
	fi #end for nested if statements

#functions with two parameters
elif [ "$1" = "add" ] || [ "$1" = "multiply" ];
then
	if [ $# = "3" ] #if there's three arguments
	then
		$1 $2 $3 #function, file1.txt, file2.txt

	else #if there is not three arguments
		echo "error, invalid amount of arguments" 1>&2
		exit 1
	fi

else
	echo "Error, function not found" 1>&2
	exit 1
fi #end for outer if statements